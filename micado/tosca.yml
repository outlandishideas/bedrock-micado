tosca_definitions_version: tosca_simple_yaml_1_0

imports:
  - https://raw.githubusercontent.com/micado-scale/tosca/v0.x.2/micado_types.yaml

repositories:
  docker_hub: https://hub.docker.com/

topology_template:
  node_templates:
    nginxapp:
      type: tosca.nodes.MiCADO.Container.Application.Docker
      properties:
        resources:
          requests:
            cpu: "200m"
        env:
          - name: NGINX_HOST
            value: "micado.out.re"
          - name: NGINX_PORT
            value: "8080"
          - name: FPM_HOST
            value: "wordpress"
          - name: FPM_PORT
            value: "9000"
        ports:
          - target: 8080
            type: NodePort
            nodePort: 32349
          - target: 9432
      artifacts:
        image:
          type: tosca.artifacts.Deployment.Image.Container.Docker
          file: outlandish/bedrock-web
          repository: docker_hub
      interfaces:
        Kubernetes:
          create:
            implementation: image

    wordpress:
      type: tosca.nodes.MiCADO.Container.Application.Docker
      properties:
        resources:
          requests:
            cpu: "200m"
        env:
          - name: DB_HOST
            value: "db"
          - name: DB_NAME
            value: "wordpress"
          - name: DB_USER
            value: "wordpress"
          - name: DB_PASSWORD
            value: "wordpress"
          - name: WP_HOME
            value: "http://micado.out.re:32349"
        ports:
          - target: 9000
      artifacts:
        image:
          type: tosca.artifacts.Deployment.Image.Container.Docker
          file: outlandish/bedrock
          repository: docker_hub
      interfaces:
        Kubernetes:
          create:
            implementation: image

    db:
      type: tosca.nodes.MiCADO.Container.Application.Docker
      properties:
        resources:
          requests:
            cpu: "200m"
        env:
          - name: MYSQL_ROOT_PASSWORD
            value: "wordpress"
          - name: MYSQL_USER
            value: "wordpress"
          - name: MYSQL_PASSWORD
            value: "wordpress"
          - name: MYSQL_DATABASE
            value: "wordpress"
        ports:
          - target: 3306
      artifacts:
        image:
          type: tosca.artifacts.Deployment.Image.Container.Docker
          file: mysql:5.7
          repository: docker_hub
      interfaces:
        Kubernetes:
          create:
            implementation: image

    worker_node:
      type: tosca.nodes.MiCADO.EC2.Compute
      properties:
        region_name: eu-west-2
        image_id: ami-0d7b406d323c92daa
        instance_type: t2.medium
        security_group_ids:
          - "sg-0c60c5f0582d49c2f"
      interfaces:
        Occopus:
          create:
            inputs:
              interface_cloud: ec2
              endpoint_cloud: https://ec2.eu-west-2.amazonaws.com
      capabilities:
        host:
          properties:
            num_cpus: 2
            mem_size: 2 GB

  outputs:
    ports:
      value: { get_attribute: [ nginxapp, port ]}

  policies:
    - scalability:
        type: tosca.policies.Scaling.MiCADO.VirtualMachine.CPU.stressng
        targets: [ worker_node ]
        properties:
          constants:
            NODE_TH_MAX: '66'
            NODE_TH_MIN: '33'
          min_instances: 1
          max_instances: 10

    - scalability:
        type: tosca.policies.Scaling.MiCADO.Container.connections.nginx
        targets: [ nginxapp ]
        properties:
          min_instances: 1
          max_instances: 10

    - scalability:
        type: tosca.policies.Scaling.MiCADO.Container.CPU.wordpress
        targets: [ wordpress ]
        properties:
          constants:
            SERVICE_NAME: 'wordpress'
            SERVICE_FULL_NAME: 'wordpress'
            SERVICE_TH_MAX: '60'
            SERVICE_TH_MIN: '25'
          min_instances: 1
          max_instances: 10

policy_types:

  tosca.policies.Scaling.MiCADO.Container.CPU.wordpress:
    derived_from: tosca.policies.Scaling.MiCADO
    description: base MiCADO policy defining data sources, constants, queries, alerts, limits and rules
    properties:
      alerts:
        type: list
        description: pre-define alerts for container CPU
        default:
          - alert: wordpress_overloaded
            expr: 'avg(rate(container_cpu_usage_seconds_total{container_label_io_kubernetes_container_name="{{SERVICE_FULL_NAME}}"}[30s]))*100 > {{SERVICE_TH_MAX}}'
            for: 30s
          - alert: wordpress_underloaded
            expr: 'avg(rate(container_cpu_usage_seconds_total{container_label_io_kubernetes_container_name="{{SERVICE_FULL_NAME}}"}[30s]))*100 < {{SERVICE_TH_MIN}}'
            for: 30s
        required: true
      scaling_rule:
        type: string
        description: pre-define scaling rule for container CPU for WordPress/PHP service
        default: |
          if len(m_nodes) == m_node_count:
            if wordpress_overloaded and m_node_count > m_container_count:
              m_container_count+=1
            if wordpress_underloaded:
              m_container_count-=1
          else:
            print('Transient phase, skipping update of containers...')
        required: true

  tosca.policies.Scaling.MiCADO.Container.connections.nginx:
    derived_from: tosca.policies.Scaling.MiCADO
    description: base MiCADO policy defining data sources, constants, queries, alerts, limits and rules
    properties:
      alerts:
        type: list
        description: pre-define alerts for container CPU
        default:
          - alert: nginx_overloaded
            expr: '(avg(rate(nginx_vts_main_connections{status=~"writing"}[2m])) - avg(rate(nginx_vts_main_connections{status=~"waiting"}[2m]))) < 0'
            for: 30s
          - alert: nginx_underloaded
            expr: '(avg(rate(nginx_vts_main_connections{status=~"writing"}[2m])) - avg(rate(nginx_vts_main_connections{status=~"waiting"}[2m]))) > 0'
            for: 2m
        required: true
      scaling_rule:
        type: string
        description: pre-define scaling rule for connections to NGINX
        default: |
          if len(m_nodes) == m_node_count:
            if nginx_overloaded and m_node_count > m_container_count:
              m_container_count+=1
            if nginx_underloaded:
              m_container_count-=1
          else:
            print('Transient phase, skipping update of containers...')
        required: true

  tosca.policies.Scaling.MiCADO.VirtualMachine.CPU.stressng:
    derived_from: tosca.policies.Scaling.MiCADO
    description: base MiCADO policy defining data sources, constants, queries, alerts, limits and rules
    properties:
      alerts:
        type: list
        description: pre-define alerts for VM CPU
        default:
          - alert: node_overloaded
            expr: '(100-(avg(rate(node_cpu{group="worker_cluster",mode="idle"}[60s]))*100)) > {{NODE_TH_MAX}}'
            for: 1m
          - alert: node_underloaded
            expr: '(100-(avg(rate(node_cpu{group="worker_cluster",mode="idle"}[60s]))*100)) < {{NODE_TH_MIN}}'
            for: 1m
        required: true
      scaling_rule:
        type: string
        description: pre-define scaling rule for VM CPU
        default: |
          if len(m_nodes) <= m_node_count and m_time_since_node_count_changed > 60:
            if node_overloaded:
              m_node_count+=1
            if node_underloaded:
              m_node_count-=1
          else:
            print('Transient phase, skipping update of nodes...')
        required: true
